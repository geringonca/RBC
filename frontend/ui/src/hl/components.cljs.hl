(ns hl.components)


(defn gql-get
  [keys data]
  (reduce #(get %1 %2) data keys))


(defelem nodule-stats-box [{:keys [this-nodule nodule-pointer]} _]
  (div :class "email-item email-item-selected pure-g"
      (div :class "pure-u" :click #(reset! nodule-pointer @this-nodule)
          (div :class "pure-u-3-4"
              (h4 :class "email-subject" (get @this-nodule "name"))
              (h5 :class "email-name" (get @this-nodule "uid"))
              (p :class "email-desc" "Zone: "(gql-get ["zoneByZone" "name"] @this-nodule))
              ; (p :class "email-desc" (gql-get ["componentsByNodule" "totalCount"] @nodule) " sensors")
              ; (p :class "email-desc" (gql-get ["componentsByNodule" "totalCount"] @nodule) " actuators")
              ; (p :class "email-desc" (gql-get ["jobsByNodule" "totalCount"] @nodule) " jobs")
              (p :class "email-desc" "Online: 5 mins ago")
          )
      )
))

(defelem nodule-selector-list [{:keys [nodulelist nodule-pointer]} _]
  (div :id "list" :class "pure-u-1"
      (for-tpl [nodule nodulelist]
        (nodule-stats-box :this-nodule nodule :nodule-pointer nodule-pointer))))

(defelem nodule-header [{:keys [nodule env-count]} _]
  (div :class "email-content-header pure-g"
      (div :class "pure-u-1-1"
          (h1 :class "email-content-title" "Nodule: " (text (get nodule "name")) " (" (text (get nodule "uid")) ")")
          (p :class "email-content-subtitle" (str "From " (or env-count "?") " different environments"))
          (p :class "email-desc" (text (gql-get ["componentsByNodule" "totalCount"] nodule)) " sensors")
          (p :class "email-desc" (text (gql-get ["componentsByNodule" "totalCount"] nodule)) " actuators")
          (p :class "email-desc" (text (gql-get ["jobsByNodule" "totalCount"] nodule)) " jobs")

          (div :class "pure-menu pure-menu-horizontal"
          ; (a :href "#" :class "pure-menu-heading pure-menu-link" "BRAND")
          (ul :class "pure-menu-list"
              (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Nodule"))
              (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Jobs"))
              (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Components"))
              (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Data"))
              )
          )
      )
  ))

(defelem rbc-nav
  [{:keys [nodule-count mdl-count cookbook-count rdk-link jkn-link dkr-link]} _]
  (div :id "nav" :class "pure-u"
      (a :href "#" :class "nav-menu-button" "Menu")

      (div :class "nav-inner"
          (button :class "primary-button pure-button" "RBC")

          (div :class "pure-menu"
              (ul :class "pure-menu-list"
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Nodules" (span :class "email-count" " " nodule-count)))
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Data" (span :class "email-count" (str "  "(rand-int 50)))))
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" "Alerts" (span :class "email-count" (str "  "(rand-int 50)))))
                  (li :class "pure-menu-heading" "Links")
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" (span :class "email-label-personal") "???"))
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" (span :class "email-label-work") "???"))
                  (li :class "pure-menu-item" (a :href "#" :class "pure-menu-link" (span :class "email-label-travel") "???"))
                )))))
